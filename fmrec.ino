#include <PCD8544.h>
#include <SPI.h> 
#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>
#include <Wire.h>
#include <TEA5767Radio.h>
#include <IRremote.h> 
TEA5767Radio radio = TEA5767Radio();
PCD8544 lcd;
boolean backlight = true;
int contrast=33;
float freq =93.5;
Adafruit_PCD8544 display = Adafruit_PCD8544( 3, 4,5,7,6);
#define but1 0xFFA25D 
#define but2 0xFF629D 
#define but3 0xFFE21D 
#define but4 0xFF22DD 
#define but5 0xFF02FD
const unsigned char NIE_LOGO [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
  0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 
  0xfc, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xfc, 0x7f, 0xff, 0xff, 
  0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xc3, 0xff, 
  0xe0, 0xff, 0x0f, 0xf0, 0x7f, 0xfc, 0x3f, 0xf0, 0xff, 0xcc, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x80, 
  0x03, 0x3f, 0xf0, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xf0, 0xff, 0xcf, 
  0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0x3f, 0xf0, 0xff, 0xcf, 0x0f, 0xff, 0xdf, 0x9f, 0xbf, 
  0xff, 0x0f, 0x3f, 0xf0, 0xff, 0xcf, 0xff, 0xff, 0x87, 0x0f, 0x1f, 0xff, 0xff, 0x3f, 0xf0, 0xff, 
  0xcf, 0xff, 0xff, 0xc0, 0x00, 0x3f, 0xff, 0xff, 0x3f, 0xf0, 0xff, 0xef, 0xff, 0xe3, 0x87, 0xfe, 
  0x1c, 0x7f, 0xff, 0x7f, 0xf0, 0xff, 0xe7, 0xff, 0xf0, 0x38, 0x01, 0xc0, 0xff, 0xfe, 0x7f, 0xf0, 
  0xff, 0xe7, 0xff, 0xf8, 0x67, 0xfe, 0x61, 0xff, 0xfe, 0x7f, 0xf0, 0xff, 0xe7, 0xff, 0xf9, 0x9f, 
  0xf7, 0x99, 0xff, 0xfe, 0x7f, 0xf0, 0xff, 0xf7, 0xfe, 0x01, 0x3f, 0xff, 0xc8, 0x0f, 0xfe, 0xff, 
  0xf0, 0xff, 0xf3, 0xff, 0x83, 0x7e, 0xff, 0xe4, 0x1f, 0xfc, 0xff, 0xf0, 0xff, 0xf3, 0xff, 0xf2, 
  0x7f, 0xff, 0xe4, 0xff, 0xfc, 0xff, 0xf0, 0xff, 0xf9, 0xff, 0xe2, 0x72, 0xfc, 0xe4, 0x7f, 0xf9, 
  0xff, 0xf0, 0xff, 0xf9, 0xff, 0x03, 0x4b, 0x05, 0x2c, 0x0f, 0xf9, 0xff, 0xf0, 0xff, 0xfc, 0xff, 
  0x01, 0x3f, 0xff, 0xc8, 0x0f, 0xf3, 0xff, 0xf0, 0xff, 0xfe, 0xff, 0xf8, 0xdf, 0xff, 0xb1, 0xff, 
  0xf7, 0xff, 0xf0, 0xff, 0xfe, 0x7f, 0xf8, 0x63, 0xfc, 0x61, 0xff, 0xe7, 0xff, 0xf0, 0xff, 0xff, 
  0x3f, 0xe0, 0x1e, 0x07, 0x80, 0x7f, 0xcf, 0xff, 0xf0, 0xff, 0xff, 0x3f, 0xef, 0xc1, 0xf8, 0x3e, 
  0x7f, 0xcf, 0xff, 0xf0, 0xff, 0xff, 0x9f, 0xff, 0x82, 0x04, 0x3f, 0xff, 0x9f, 0xff, 0xf0, 0xff, 
  0xff, 0xcf, 0xff, 0x8f, 0x0f, 0x1f, 0xff, 0x3f, 0xff, 0xf0, 0xff, 0xff, 0xe7, 0xff, 0xff, 0x9f, 
  0xff, 0xfe, 0x7f, 0xff, 0xf0, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xf3, 0xfc, 0x7f, 0xff, 0xc7, 0xfd, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xf9, 0xfc, 0x39, 
  0x9c, 0x3f, 0xf9, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xfc, 0xfc, 0x39, 0x9c, 0xff, 0xf3, 0xff, 0xff, 
  0xf0, 0xff, 0xff, 0xff, 0x3c, 0x99, 0x9c, 0x8f, 0xcf, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0x9c, 
  0xc9, 0x9c, 0x3f, 0x9f, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xce, 0xc9, 0x9c, 0xf7, 0x3f, 0xff, 
  0xff, 0xf0, 0xff, 0xff, 0xff, 0xe7, 0xe1, 0x9c, 0xce, 0x7f, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 
  0xf1, 0xf1, 0x9c, 0x18, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xfc, 0xf1, 0x9c, 0x73, 0xff, 
  0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xfe, 0x39, 0x9d, 0xc7, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 
  0xff, 0xff, 0x9f, 0x9f, 0x9f, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xfe, 0x7f, 
  0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
int RECV_PIN = 8;
uint32_t Previous;
IRrecv irrecv(RECV_PIN);     
decode_results results;     
void setup() {
Serial.begin(9600);     
irrecv.enableIRIn();
pinMode(9,OUTPUT); 
lcd.begin(84, 48);
display.begin();      
display.clearDisplay(); 
display.display(); 
display.setContrast(33);
// Clear the buffer.
display.clearDisplay();
// Display bitmap
display.drawBitmap(0, 0,NIE_LOGO,84,48,BLACK);
display.display();
delay(5000);
display.clearDisplay();
delay(200);  
Wire.begin();
radio.setFrequency(freq); // pick your own frequency  
}
void loop() {
  if (irrecv.decode(&results))// Returns 0 if no data ready, 1 if data ready.     
{ 
if(results.value==0xFFFFFFFF){
 results.value=Previous;
 }
switch(results.value){
case but1:
freq=93.5;
radio.setFrequency(freq); 
break;
case but2:
freq=100.6;
radio.setFrequency(freq); 
break;
case but3:
freq=104.8;
radio.setFrequency(freq); 
break;
case but4:
freq=92.7;
radio.setFrequency(freq); 
break; 
}    
 Serial.println(results.value,HEX); //prints the value a a button press       
 irrecv.resume(); // Restart the ISR state machine and Receive the next value     
}

 lcd.setCursor(0, 0); 
 lcd.print("  FREQUENCY");
 lcd.setCursor(23,2);
 lcd.print(freq);   
 }
  int setContrast()
  {
 display.setContrast(33);
 display.display();
  }
